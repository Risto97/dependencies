#!/bin/bash

base_dir=$( cd $(dirname $0) && pwd )
source $base_dir/common.sh

if [ $# -lt 2 ]; then
  echo "usage: $0 [-d | -s <source_dir>] [-j <num_threads_to_build>] <target_dir> <package> {<package>}";
  exit 21
fi

from_src="no"
dl_only="no"

case $1 in
  --source|-s)   src_dir="$2"; from_src="yes"; shift; shift;;
  --download|-d) dl_only="yes"; shift;;
esac

if [ $1 = "-j" ]; then
  num_threads="$2";
  shift; shift;
else
  num_threads=1
fi

root="$(mkdir -p $1 && cd $1 && pwd)"

target="$root"
build="$root/build"
src_dir="${src_dir:-$root/source}"
src_dir="$(mkdir -p $src_dir && cd $src_dir && pwd)"
shift;

mkdir -p "$target"
if [ $dl_only = "no" ]; then
  mkdir -p "$build"
fi &&
if [ ! -d "$src_dir" ]; then
  mkdir -p "$src_dir"
fi

packages=$( with_deps $@ )

for p in $packages; do
  target="$root/$p"
  export CMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH:$target"
  if [ -d "$target" ] ; then
    if [ $duplicate = "skip" ]; then
      message "skipping $p" &&
      continue
    elif [ $duplicate = "remove" ]; then
      message "removing existing package $p" &&
      rm -r "$target"
    elif  [ $duplicate = "rebuild" ]; then
        message "rebuilding existing package $p" &&
  	run_scripts build_install
	continue
    else
      error "directory for $p already exists"
    fi
  fi
  if [ $dl_only = "yes" ]; then
    run_scripts download
    continue
  fi
  if [ $from_src = "yes" ]; then
    run_scripts unpack pre_build build_install
    continue
  fi
  run_scripts download_unpack pre_build build_install
done
